{"version":3,"sources":["handmodules/defaultshow/insideHome.js","handmodules/config/config.js","handmodules/home.js","handmodules/defaultshow/insideLogin.js","handmodules/login.js","App.js","serviceWorker.js","index.js"],"names":["InsideHome","react_default","a","createElement","className","es","size","this","props","AdminRank","AdminName","Adminlvl","AdminPoints","details","Component","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","settings","timestampsInSnapshots","Home","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","Admins","fireStore","collection","_this2","previousAdmins","onSnapshot","snapshot","docChanges","forEach","change","type","push","id","doc","data","AdminLvl","AdminDetails","setState","i","length","splice","alert","setTimeout","window","location","reload","map","admin","insideHome","InsideLogin","handleAdminRanknameEdit","visibleForAdminRankName","handleAdminlvl","visibleForAdminlvl","handleAdminPoints","visibleForAdminpoints","hide","AdminNameVal","AdminRankVal","AdminlvlVal","AdminpointsVal","handleAdminRanknameConfirm","handleAdminlvlConfirm","handleAdminlvlEdit","handleAdminPointsConfirm","handleAdminPointsEdit","handleDelete","deleteAdmin","actionsForAdminRankName","secondary","children","onClick","flat","primary","actionAdminLevel","actionAdminPoints","visible","actions","title","label","placeholder","defaultValue","onChange","val","value","Login","handelLogin","auth","signInWithEmailAndPassword","EmailVal","PasswordVal","then","catch","error","message","handelAddAdmin","add","modalDivStyle","delete","update","loggedin","UserEmail","checkLoggedin","onAuthStateChanged","user","currentUser","email","_this3","loginStyle","display","_ref","simplifiedMenu","concat","menuItems","anchor","x","DropdownMenu","HorizontalAnchors","CENTER","y","VerticalAnchors","OVERLAP","position","Positions","TOP_RIGHT","animationPosition","sameWidth","component","IconSeparator","iconBefore","charAt","toUpperCase","swapTheming","style","lineDirection","insideLogin","App","react_router_dom","react_router","exact","path","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba005dd5.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport { Grid, Cell} from 'react-md'\r\n\r\nclass InsideHome extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className='insideHomeAndloginCss'>\r\n                <Grid>\r\n                    <Cell size={5}>{this.props.AdminRank} {this.props.AdminName}</Cell>\r\n                    <Cell size={7}>Admin level: {this.props.Adminlvl}</Cell>\r\n                    <Cell size={7}>Admin Current Points: {this.props.AdminPoints}</Cell>\r\n                    <Cell size={12}>details: {this.props.details}</Cell>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InsideHome","import firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBAV1an9KRDLuaW1sG5Xune1MMZpD52QdQ\",\r\n    authDomain: \"sagadminpanel.firebaseapp.com\",\r\n    databaseURL: \"https://sagadminpanel.firebaseio.com\",\r\n    projectId: \"sagadminpanel\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"807729199407\",\r\n    appId: \"1:807729199407:web:9cf5124e63300058\"\r\n  };\r\n\r\nconst fire = firebase.initializeApp(firebaseConfig);\r\n\r\nconst firestore = fire.firestore()\r\n\r\n firestore.settings({timestampsInSnapshots: true})\r\n \r\n\r\n export { fire,firestore };","import React,{Component} from 'react'\r\nimport {\r\n    Grid, \r\n    Cell,\r\n  } from 'react-md';\r\nimport InsideHome from './defaultshow/insideHome'\r\nimport {firestore} from './config/config'\r\n\r\nclass Home extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            Admins:[],\r\n        }\r\n        this.fireStore = firestore.collection('Admins')\r\n    }\r\n\r\n    componentWillMount(){\r\n          const previousAdmins = this.state.Admins\r\n\r\n          this.fireStore.onSnapshot((snapshot)=>{\r\n              snapshot.docChanges().forEach((change)=>{\r\n                  if(change.type === 'added'){\r\n                    previousAdmins.push({\r\n                          id: change.doc.id,\r\n                          AdminName: change.doc.data().AdminName,\r\n                          AdminRank: change.doc.data().AdminRank,\r\n                          AdminLvl: change.doc.data().AdminLvl,\r\n                          AdminPoints: change.doc.data().AdminPoints,\r\n                          AdminDetails: change.doc.data().AdminDetails,\r\n                        })\r\n  \r\n                        this.setState({\r\n                            Admins: previousAdmins\r\n                        })\r\n                      \r\n                  }else if(change.type === 'removed'){\r\n                      for(var i=0; i < previousAdmins.length; i++){\r\n                          if(previousAdmins[i].id === change.doc.id){\r\n                            previousAdmins.splice(i, 1);\r\n                          }\r\n                        }\r\n                  \r\n                        this.setState({\r\n                            Admins: previousAdmins\r\n                        })\r\n                  }else if(change.type ==='modified'){\r\n                    alert('There is an updated detected website will auto reload after 3 seconds')\r\n                    setTimeout(() => {\r\n                        window.location.reload();\r\n                    }, 3000);\r\n                  }\r\n              })\r\n          })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                    <div className='homeAdminlistTittle'>\r\n                        <center>\r\n                            <h1>Admin List</h1>\r\n                        </center>\r\n                    </div>\r\n                    <br/>\r\n                    <Grid>\r\n                        {\r\n                                this.state.Admins.map((admin)=>{\r\n                                    return(\r\n                                        <Cell size ={4}>\r\n                                            <InsideHome\r\n                                            AdminRank={admin.AdminRank}\r\n                                            AdminName={admin.AdminName}\r\n                                            Adminlvl={admin.AdminLvl}\r\n                                            AdminPoints={admin.AdminPoints}\r\n                                            details={admin.AdminDetails}\r\n                                            />\r\n                                        </Cell>\r\n                                    )\r\n                                })\r\n                        }\r\n                    </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React,{Component} from 'react'\r\nimport { Grid, Cell, FontIcon, DialogContainer , Button , TextField } from 'react-md'\r\n\r\nclass InsideLogin extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            visibleForAdminRankName:false,\r\n            visibleForAdminlvl:false,\r\n            visibleForAdminpoints:false,\r\n            AdminNameVal:\"\",\r\n            AdminRankVal:\"\",\r\n            AdminlvlVal:\"\",\r\n            AdminpointsVal:\"\",\r\n            AdminDetails:\"\",\r\n        }\r\n    }\r\n\r\n    handleAdminRanknameEdit = () =>{\r\n        this.setState({\r\n            visibleForAdminRankName:true,\r\n        })\r\n    }\r\n\r\n    handleAdminlvl = () =>{\r\n        this.setState({\r\n            visibleForAdminlvl:true,\r\n        })\r\n    }\r\n\r\n    handleAdminPoints = () =>{\r\n        this.setState({\r\n            visibleForAdminpoints:true,\r\n        })\r\n    } \r\n\r\n    hide = () =>{\r\n        this.setState({\r\n            visibleForAdminRankName:false,\r\n            visibleForAdminlvl:false,\r\n            visibleForAdminpoints:false,\r\n            AdminNameVal:\"\",\r\n            AdminRankVal:\"\",\r\n            AdminlvlVal:\"\",\r\n            AdminpointsVal:\"\",\r\n            AdminDetails:\"\",\r\n        })\r\n    }\r\n\r\n    handleAdminRanknameConfirm = () =>{\r\n        this.props.handleAdminRanknameEdit(this.props.id,this.state.AdminNameVal,this.state.AdminRankVal)\r\n    }\r\n    handleAdminlvlConfirm = () =>{\r\n        this.props.handleAdminlvlEdit(this.props.id,this.state.AdminlvlVal)\r\n    }\r\n    handleAdminPointsConfirm = () =>{\r\n        this.props.handleAdminPointsEdit(this.props.id,this.state.AdminpointsVal,this.state.AdminDetails)\r\n    }\r\n\r\n    handleDelete = (id) =>{\r\n        this.props.deleteAdmin(id)\r\n    }\r\n\r\n    render(){\r\n        const actionsForAdminRankName = [];\r\n        actionsForAdminRankName.push({ secondary: true, children: 'Cancel', onClick: this.hide });\r\n        actionsForAdminRankName.push(<Button flat primary onClick={this.handleAdminRanknameConfirm}>Confirm</Button>);\r\n\r\n        const actionAdminLevel = [];\r\n        actionAdminLevel.push({ secondary: true, children: 'Cancel', onClick: this.hide });\r\n        actionAdminLevel.push(<Button flat primary onClick={this.handleAdminlvlConfirm}>Confirm</Button>);\r\n\r\n        const actionAdminPoints = [];\r\n        actionAdminPoints.push({ secondary: true, children: 'Cancel', onClick: this.hide });\r\n        actionAdminPoints.push(<Button flat primary onClick={this.handleAdminPointsConfirm}>Confirm</Button>);\r\n        return(\r\n            <div className='insideHomeAndloginCss'>\r\n                <Grid>\r\n                    <Cell size={6}>{this.props.AdminRank} {this.props.AdminName}<FontIcon className=\"editFontICon\" onClick={()=>{this.handleAdminRanknameEdit()}}>edit</FontIcon></Cell>\r\n                        <div>\r\n                            <DialogContainer\r\n                            id=\"simple-action-dialog\"\r\n                            visible={this.state.visibleForAdminRankName}\r\n                            actions={actionsForAdminRankName}\r\n                            title=\"Change something about AdminRank or AdminName?\"\r\n                            >\r\n                            <TextField\r\n                                id=\"simple-action-dialog-field\"\r\n                                label=\"Change AdminName\"\r\n                                placeholder=\"Enter AdminName...\"\r\n                                defaultValue={this.props.AdminName}\r\n                                onChange={(val)=>{this.setState({AdminNameVal:val})}}\r\n                            />\r\n                            <TextField\r\n                                id=\"simple-action-dialog-field\"\r\n                                value={this.state.AdminRank}\r\n                                label=\"Change AdminRank\"\r\n                                placeholder=\"Enter AdminRank...\"\r\n                                defaultValue={this.props.AdminRank}\r\n                                onChange={(val)=>{this.setState({AdminRankVal:val})}}\r\n                            />\r\n                            </DialogContainer>\r\n                        </div>\r\n                    <Cell size={5}>Admin level: {this.props.Adminlvl}<FontIcon className=\"editFontICon\" onClick={()=>{this.handleAdminlvl()}}>edit</FontIcon></Cell>\r\n                    <Cell size={1}><FontIcon className=\"deleteButton\" onClick={()=>{this.handleDelete(this.props.id)}}>delete</FontIcon></Cell>\r\n                        <div>\r\n                            <DialogContainer\r\n                            id=\"simple-action-dialog\"\r\n                            visible={this.state.visibleForAdminlvl}\r\n                            actions={actionAdminLevel}\r\n                            title=\"Change something about Adminlvl?\"\r\n                            >\r\n                            <TextField\r\n                                type='number'\r\n                                id=\"simple-action-dialog-field\"\r\n                                label=\"Change Adminlvl\"\r\n                                placeholder=\"Enter Adminlvl...\"\r\n                                defaultValue={this.props.Adminlvl}\r\n                                onChange={(val)=>{this.setState({AdminlvlVal:val})}}\r\n                            />\r\n                            </DialogContainer>\r\n                        </div>\r\n                    <Cell size={12}>Admin Current Points: {this.props.AdminPoints}<FontIcon className=\"editFontICon\" onClick={()=>{this.handleAdminPoints()}}>edit</FontIcon></Cell>\r\n                    <Cell size={12}>details: {this.props.details}</Cell>\r\n                        <div>\r\n                            <DialogContainer\r\n                            id=\"simple-action-dialog\"\r\n                            visible={this.state.visibleForAdminpoints}\r\n                            actions={actionAdminPoints}\r\n                            title=\"Change something about AdminPoints?\"\r\n                            >\r\n                            <TextField\r\n                                type='number'\r\n                                id=\"simple-action-dialog-field\"\r\n                                label=\"Some content to change\"\r\n                                placeholder=\"Content...\"\r\n                                defaultValue={this.props.AdminPoints}\r\n                                onChange={(val)=>{this.setState({AdminpointsVal:val})}}\r\n                            />\r\n                            <TextField\r\n                                id=\"simple-action-dialog-field\"\r\n                                label=\"Some content to change\"\r\n                                placeholder=\"Content...\"\r\n                                defaultValue={this.props.details}\r\n                                onChange={(val)=>{this.setState({AdminDetails:val})}}\r\n                            />\r\n                            </DialogContainer>\r\n                        </div>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default InsideLogin","import React,{Component} from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport {\r\n  Avatar,\r\n  FontIcon,\r\n  AccessibleFakeButton,\r\n  IconSeparator,\r\n  DropdownMenu,\r\n  TextField, \r\n  Button,\r\n  Grid, \r\n  Cell,\r\n} from 'react-md';\r\nimport InsideLogin from './defaultshow/insideLogin'\r\nimport {fire,firestore} from './config/config'\r\n\r\nclass Login extends Component{\r\n\r\n    constructor(){\r\n        super()\r\n\r\n        this.state={\r\n            EmailVal:\"\",\r\n            PasswordVal:\"\",\r\n            loggedin:false,\r\n            UserEmail:\"\",\r\n            modalDivStyle:'none',\r\n            AdminName:'',\r\n            AdminRank:'',\r\n            Adminlvl:'',\r\n            Admins:[],\r\n            checkLoggedin:'none',\r\n        }\r\n        this.fireStore = firestore.collection('Admins')\r\n\r\n    }\r\n\r\n    componentWillMount(){\r\n        fire.auth().onAuthStateChanged((user) =>{\r\n            if (user) {\r\n                this.setState({\r\n                    loggedin:true,\r\n                    UserEmail: fire.auth().currentUser.email\r\n                })\r\n            } else {\r\n                this.setState({\r\n                    loggedin:false,\r\n                    checkLoggedin:'',\r\n                })\r\n            }\r\n          });\r\n          const previousAdmins = this.state.Admins\r\n\r\n          this.fireStore.onSnapshot((snapshot)=>{\r\n              snapshot.docChanges().forEach((change)=>{\r\n                  if(change.type === 'added'){\r\n                    previousAdmins.push({\r\n                          id: change.doc.id,\r\n                          AdminName: change.doc.data().AdminName,\r\n                          AdminRank: change.doc.data().AdminRank,\r\n                          AdminLvl: change.doc.data().AdminLvl,\r\n                          AdminPoints: change.doc.data().AdminPoints,\r\n                          AdminDetails: change.doc.data().AdminDetails,\r\n                        })\r\n  \r\n                        this.setState({\r\n                            Admins: previousAdmins\r\n                        })\r\n                      \r\n                  }else if(change.type === 'removed'){\r\n                      for(var i=0; i < previousAdmins.length; i++){\r\n                          if(previousAdmins[i].id === change.doc.id){\r\n                            previousAdmins.splice(i, 1);\r\n                          }\r\n                        }\r\n                  \r\n                        this.setState({\r\n                            Admins: previousAdmins\r\n                        })\r\n                  }else if(change.type ==='modified'){\r\n                    setTimeout(() => {\r\n                        window.location.reload();\r\n                    }, 3000);\r\n                  }\r\n              })\r\n          })\r\n    }\r\n\r\n    handelLogin = () =>{\r\n        fire.auth().signInWithEmailAndPassword(this.state.EmailVal, this.state.PasswordVal).then(()=>{\r\n            alert('Logged in successfully')\r\n        }).catch((error) => {\r\n            alert(error.message)\r\n          })\r\n    }\r\n\r\n    handelAddAdmin = () =>{\r\n        if(this.state.AdminName === '' || this.state.AdminRank === '' || this.state.Adminlvl === \"\"){\r\n            return alert('You need to fill the inputs!!')\r\n        }\r\n        this.fireStore.add({\r\n            AdminName: this.state.AdminName,\r\n            AdminRank: this.state.AdminRank,\r\n            AdminLvl:  this.state.Adminlvl,\r\n            AdminPoints:5,\r\n            AdminDetails:\"No Details were found\",\r\n        })\r\n        .then(() =>{\r\n            alert('Admin is added!')\r\n            this.setState({\r\n                modalDivStyle:'none',\r\n                AdminName:'',\r\n                AdminRank:'',\r\n                Adminlvl:'',\r\n            })\r\n        })\r\n        .catch((error) =>{\r\n            alert(error.message)\r\n        });\r\n    }\r\n\r\n    deleteAdmin = (id) =>{\r\n        this.fireStore.doc(id).delete().then(() =>{\r\n            alert(\"Admin successfully deleted!\");\r\n        }).catch((error) =>{\r\n            alert(error.message)\r\n        });\r\n    }\r\n\r\n    handleAdminRanknameEdit = (id,AdminNameVal,AdminRankVal) =>{\r\n        if(AdminNameVal !== '' && AdminRankVal !== \"\"){\r\n            this.fireStore.doc(id).update({\r\n                AdminName: AdminNameVal,\r\n                AdminRank: AdminRankVal,\r\n            })\r\n            alert(\"AdminName and AdminRank updated successfully website will auto reload to update! Website will auto reload after 3 seconds\")\r\n        }\r\n        else if(AdminNameVal !== ''){\r\n            this.fireStore.doc(id).update({\r\n                AdminName: AdminNameVal,\r\n            })\r\n            alert(\"AdminName updated successfully website will auto reload to update! Website will auto reload after 3 seconds\")\r\n        }\r\n        else if(AdminRankVal !== \"\"){\r\n            this.fireStore.doc(id).update({\r\n                AdminRank: AdminRankVal,\r\n            })\r\n            alert(\"AdminRank updated successfully website will auto reload to update! Website will auto reload after 3 seconds\")\r\n        }\r\n        else {\r\n            alert(\"You didn't change anything!\")\r\n        }\r\n    }\r\n\r\n    handleAdminlvlEdit = (id,AdminlvlVal) =>{\r\n        if(AdminlvlVal !== \"\"){\r\n            alert(AdminlvlVal)\r\n            this.fireStore.doc(id).update({\r\n                AdminLvl: AdminlvlVal,\r\n            })\r\n            alert(\"AdminName and AdminRank updated successfully website will auto reload to update! Website will auto reload after 3 seconds\")\r\n        }else{\r\n            alert(\"You didn't change anything!\")\r\n        }\r\n    }\r\n\r\n    handleAdminPointsEdit = (id,AdminpointsVal,AdminDetails) =>{\r\n        if(AdminpointsVal !== '' && AdminDetails !== \"\"){\r\n            this.fireStore.doc(id).update({\r\n                AdminPoints: AdminpointsVal,\r\n                AdminDetails: AdminDetails,\r\n            })\r\n            alert(\"AdminName and AdminRank updated successfully website will auto reload to update! Website will auto reload after 3 seconds\")\r\n        }else{\r\n            alert(\"You didn't change anything!(If you changed points,you need to change details too)\")\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const loginStyle = {\r\n            display:this.state.checkLoggedin\r\n        }\r\n\r\n        const AccountMenu = ({ simplifiedMenu }) => (\r\n            <div className=\"accoutmenuDi\">\r\n                <Grid>\r\n                    <Cell size={7}>\r\n                        <h1 className=\"sectionTittle\">Admin Control Panel</h1>\r\n                    </Cell>\r\n                    <Cell size={3}>\r\n                        <DropdownMenu\r\n                        id={`${!simplifiedMenu ? 'smart-' : ''}avatar-dropdown-menu`}\r\n                        menuItems={[\r\n                            <div className='md-fake-btn md-pointer--hover md-fake-btn--no-outline md-list-tile md-text logoffCss'>Log Off</div>\r\n                            ]}\r\n                        anchor={{\r\n                            x: DropdownMenu.HorizontalAnchors.CENTER,\r\n                            y: DropdownMenu.VerticalAnchors.OVERLAP,\r\n                        }}\r\n                        position={DropdownMenu.Positions.TOP_RIGHT}\r\n                        animationPosition=\"below\"\r\n                        sameWidth\r\n                        simplifiedMenu={simplifiedMenu}\r\n                        className=\"AccountMenu\"\r\n                        >\r\n                        <AccessibleFakeButton\r\n                            component={IconSeparator}\r\n                            iconBefore\r\n                            label={\r\n                            <IconSeparator label={this.state.UserEmail} className=\"emialicon\">\r\n                                <FontIcon className=\"emailArrowdown\">arrow_drop_down</FontIcon>\r\n                            </IconSeparator>\r\n                            }\r\n                        >\r\n                            <Avatar className=\"EmailIcon\">{this.state.UserEmail.charAt(0).toUpperCase()}</Avatar>\r\n                        </AccessibleFakeButton>\r\n                        </DropdownMenu>\r\n                    </Cell>\r\n                </Grid>\r\n            </div>\r\n          );\r\n\r\n          AccountMenu.propTypes = {\r\n            simplifiedMenu: PropTypes.bool,\r\n          };\r\n\r\n          const modalDivStyle ={\r\n              display: this.state.modalDivStyle\r\n          }\r\n\r\n        if(this.state.loggedin){\r\n            return(\r\n                <div className='accountMenuNavBar'>\r\n                    <AccountMenu/>\r\n                    <center>\r\n                        <Button flat primary swapTheming className=\"addAdminHome\" onClick={()=>{this.setState({modalDivStyle:''})}}>Add Admin</Button>\r\n                    </center>\r\n\r\n                    <div id=\"myModal\" className=\"modal\" style={modalDivStyle}>\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-header\">\r\n                            <span className=\"close\" onClick={()=>{this.setState({\r\n                                modalDivStyle:'none',\r\n                                AdminName:'',\r\n                                AdminRank:'',\r\n                                Adminlvl:'',\r\n                            })}}>&times;</span>\r\n                            <h2 className='modalTittle'>Add Admin</h2>\r\n                            </div>\r\n                            <div className=\"modal-body\">\r\n                                <center>\r\n                                    <br/>\r\n                                    <h3>Fill inputs to add an admin to the list</h3>\r\n                                    <TextField\r\n                                        id=\"floating-center-title\"\r\n                                        label=\"Admin Name\"\r\n                                        lineDirection=\"center\"\r\n                                        placeholder=\"Enter admin name...\"\r\n                                        className=\"md-cell md-cell--bottom addAdminInput\"\r\n                                        value={this.state.AdminName}\r\n                                        onChange={(val)=>{this.setState({AdminName:val})}}\r\n                                    />\r\n                                    <TextField\r\n                                        id=\"floating-center-title\"\r\n                                        label=\"Admin Rank\"\r\n                                        lineDirection=\"center\"\r\n                                        placeholder=\"Enter admin rank...\"\r\n                                        className=\"md-cell md-cell--bottom addAdminInput\"\r\n                                        value={this.state.AdminRank}\r\n                                        onChange={(val)=>{this.setState({AdminRank:val})}}\r\n                                    />\r\n                                    <TextField\r\n                                        id=\"floating-center-title\"\r\n                                        label=\"Admin lvl\"\r\n                                        type=\"number\"\r\n                                        lineDirection=\"center\"\r\n                                        placeholder=\"Enter admin lvl...\"\r\n                                        className=\"md-cell md-cell--bottom addAdminInput\"\r\n                                        value={this.state.Adminlvl}\r\n                                        onChange={(val)=>{this.setState({Adminlvl:val})}}\r\n                                    />\r\n                                    <br/>\r\n                                </center>\r\n                            </div>\r\n                            <div className=\"modal-footer\">\r\n                                <center>\r\n                                    <Button flat primary swapTheming className=\"AddAdminBtn\" onClick={this.handelAddAdmin}>Add Admin</Button>\r\n                                </center>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    \r\n                    <Grid>\r\n                        {\r\n                            this.state.Admins.map((admin)=>{\r\n                                return(\r\n                                    <Cell size ={4}>\r\n                                        <InsideLogin\r\n                                        id={admin.id}\r\n                                        AdminRank={admin.AdminRank}\r\n                                        AdminName={admin.AdminName}\r\n                                        Adminlvl={admin.AdminLvl}\r\n                                        AdminPoints={admin.AdminPoints}\r\n                                        details={admin.AdminDetails}\r\n                                        deleteAdmin={this.deleteAdmin}\r\n                                        handleAdminRanknameEdit={this.handleAdminRanknameEdit}\r\n                                        handleAdminlvlEdit={this.handleAdminlvlEdit}\r\n                                        handleAdminPointsEdit={this.handleAdminPointsEdit}\r\n                                        />\r\n                                    </Cell>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Grid>\r\n                </div>\r\n            )\r\n        }else{\r\n            return(\r\n                <div className='loginDiv' style={loginStyle}>\r\n                    <center>\r\n                        <h1>LogIn As ServerManager</h1>\r\n                        \r\n                        <TextField\r\n                            id=\"floating-center-title\"\r\n                            label=\"Email\"\r\n                            lineDirection=\"center\"\r\n                            placeholder=\"Enter email...\"\r\n                            className=\"md-cell md-cell--bottom reactMdInput\"\r\n                            value={this.state.EmailVal}\r\n                            onChange={(val)=>{this.setState({EmailVal:val})}}\r\n                        />\r\n                        <TextField\r\n                            id=\"floating-center-title\"\r\n                            type='password'\r\n                            label=\"Password\"\r\n                            lineDirection=\"center\"\r\n                            placeholder=\"Enter password...\"\r\n                            className=\"md-cell md-cell--bottom reactMdInput\"\r\n                            value={this.state.PasswordVal}\r\n                            onChange={(val)=>{this.setState({PasswordVal:val})}}\r\n                        />\r\n                        <Button flat primary swapTheming className='LoginButton' onClick={this.handelLogin}>Login</Button>\r\n                    </center>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Login","import React , {Component} from 'react';\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport Home from './handmodules/home'\nimport Login from './handmodules/login'\nimport './App.css';\n\nclass App extends Component{\n\n  render(){\n    return (\n      <div className=\"App\">\n        <Router>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/Login/\" component={Login} />\n        </Router>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}